/** Advanced SAS **/
/** SQL **/
/** stuctured query language **/

proc sql;
select name,sex,age from sashelp.class; /** retriving the data **/
quit;

proc sql;
create table dataset as
select * from sashelp.class; /** astrick means all the variables **/
quit;
data new;
set sashelp.class;
format age dollar8.;
run;

proc sql;
create table emp
(
ename char(15), 
dname char(15),
job char(30),  
empno num(10), 
salary num(10) format=NLMNLGBP.,
loc char(30), 
hiredate num format=date9.
);
insert into emp values('ADAMS','RESEARCH','CLERK', 7876, 80000,'DALLAS','23may1987'd );
insert into emp values('ALLEN','SALES','SALESMAN',7499, 85000,'CHICAGO','23feb1981'd);
insert into emp values('BLAKE','SALES','MANAGER',7698,75000,'CHICAGO','01may1981'd);
insert into emp values('CLARK','ACCOUNTING','MANAGER',7782,65000,'NEW YORK','09jun1981'd);
insert into emp values('FORD','RESEARCH','ANALYST',7902,64000,'DALLAS','03dec1981'd);
insert into emp values('JAMES','SALES','CLERK',7900,78000,'CHICAGO','03dec1981'd);
insert into emp values('JONES','RESEARCH','MANAGER',7566,98000,'DALLAS','02apr1981'd);
insert into emp values('KING','ACCOUNTING','PRESIDENT',7839,58000,'NEW YORK','17nov1981'd);
insert into emp values('MARTIN','SALES','SALESMAN',7654,69000,'CHICAGO','28sep1981'd);
insert into emp values('MILLER','ACCOUNTING','CLERK',7934,70000,'NEW YORK','23jan1982'd);
insert into emp values('SCOTT','RESEARCH','ANALYST',7788,79000,'DALLAS','19apr1987'd);
insert into emp values('SMITH','RESEARCH','CLERK',7369,76000,'DALLAS','17dec1980'd);
insert into emp values('TURNER','SALES','SALESMAN',7844,64000,'CHICAGO','08sep1981'd);
insert into emp values('WARD','SALES','SALESMAN',7521,64000,'CHICAGO','22feb1981'd);
Quit;

proc sql;
describe table emp;
quit;


proc sql;
alter table emp modify dname 'deptname' ;
quit;


proc sql ;
select * from emp;
quit;


proc sql;
alter table emp drop dname,job ;
quit;



proc sql; /** adding variable state **/
alter table emp add STATE char(20);
update emp set state='TEXAS'  where LOC='DALLAS';
update emp set state='ALBANY'  where LOC='NEW YORK';
update emp set state='SPRINGFIELD' where LOC='CHICAGO';
quit;

proc sql;
create table emp1 as
select * from emp
where loc='DALLAS' ;
quit;

proc sql;
create table emp1 as
select * from emp
where loc='DALLAS' 
order by job desc;
quit;

proc sql;
create table emp1 as
select ename as empname,dname as deptname,job, EMPNO, salary, (salary*10/100)  as bonus , 
loc as location, hiredate from emp
where loc='DALLAS' and calculated bonus>7000
order by job desc;
footnote "THIS IS GENERATED BY SUDHAKAR" JUSTIFY=right;
PROC PRINT ;
quit;


/** SQL PASSTHROUGH QUERY **/

proc sql;    
   connect to oracle  (user=smith password=secret path='myoracleserver'); 
     create TABLE employee as
      select * from connection to oracle       
            (
            select empid, lastname, firstname, salary from employees where salary>75000 
            );  
   disconnect from oracle; 
quit; 

/** IMPPLICIT PASSTHROUGH QUERY **/

libname teradata oracle user=username password=password path='mysqlserver';

data new;
set teradata.dataset;
/** data management **/;
run;



proc sql;
create table emp1 as
select ename as empname,dname as deptname,job, EMPNO, 
salary, (salary*.10)  as bonus , loc as location, hiredate from teradata.emp
where loc='DALLAS' and calculated bonus>7000
order by job desc;
footnote "THIS IS GENERATED BY SUDHAKAR" JUSTIFY=right;
PROC PRINT ;
quit;

proc sql;
create table PD as
select distinct(age) from sashelp.class; /**distinct use for deleting duplicate**/
quit;


/** each department wise second highest salary **/

data empsalary;
input empid empname $ empdept $ salary;
cards;
101 sudhakar A  75000
102 prit B 50000
103 vishal C 55000
104 surat D 60000
105 tango E 65000
106 alpha A 75000
107 suresh B 50000
108 rima C 55000
109 pooja D 60000
110 tulshi E 65000
111 chailtali A 80000
112 hina A 45000
113 tina B 55000
114 jina B 35000
115 mina C 65000
116 kina C 38000 
117 kamina D 65000
118 kutta D 25000
119 riddhi E 89000
120 dharti E 15000
;
run;

/*** sql ***/
proc sql;
create table second_highest_salary as
select * from empsalary a
where 3=(select 
count(distinct(salary))   
from empsalary b
where a.empdept=b.empdept and a.salary <= b.salary)
order by empdept;
quit;

/** procedures **/
proc sort data=empsalary out=empsalary_sort;
by empdept;
run;

proc rank data=empsalary_sort out=salaryrank2(where=(salrank=2))   descending ties=dense;
var salary ;
by empdept;
ranks salrank;
run;
/** data step **/

proc sort data=empsalary out=empsalary_sort;
by empdept descending  salary;
run;
 
data second_highest;
set empsalary_sort;
by empdept descending  salary;
if first.empdept then n=0; n+1;
if n in (2,3);
run;

/* The IFN function returns a numeric value based on whether an expression is true, false, or missing/. */

data second_highest;
set empsalary_sort;
by empdept descending  salary;
if first.empdept then n=0; n+1;
rank+ifn(salary=lag(salary),0,1)-rank*first.empdept; 
/*** lag function is nothing but difference between two values **/
if rank=2;
drop n rank;
run;


data new;
set empsalary_sort;
by empdept descending  salary;
if first.empdept then do;
n=0; totalsalary=0;
end;
n+1;
totalsalary+salary;
if last.empdept then output;
run;

proc sql;
create table second_age as
select * from sashelp.class a
where 2=(select count(distinct(age)) from sashelp.class b 
where a.sex=b.sex and a.age <=b.age) order by sex;
quit;

proc sort data=sashelp.class out=class_sort;
by sex;
run;

proc rank data=class_sort out=class_rank(where=(ageranks=2))  descending ties=dense;
var age;
by sex;
ranks ageranks;
run;

proc sort data=sashelp.class out=class_data;
by sex descending age;
run;

data second_highest;
set class_data;
by sex descending age;
if first.sex then n=0; n+1; 
rank+ifn(age=lag(age),0,1)-rank*first.sex;
if rank=2;
run;

proc sql;
create table ds as
select age from sashelp.class;
quit;


proc sql;
create table ds_1 as
select distinct(age) from sashelp.class;
quit;


/** joins **/
data one;
input id @@;
cards;
1 2 4 8 9 9 2 3 7
;
run;

data two;
input ids;
cards;
2 1 8 . . 3 5 4 6 9
;
run;

/** it will merge horizentally and takes all the values from the both the tables **/

proc sql;
create table full_join as
select * from one a full join two b
on  a.id=b.ids;
quit;


/** it will merge horizentally and takes common the values from the both the tables **/
proc sql;
create table inner_join as
select * from one a inner join two b
on  a.id=b.ids;
quit;

/** it will merge horizentally and it takes all the values from left side table and matching records from the right table **/
proc sql;
create table left_join as
select * from one a left join two b
on  a.id=b.ids;
quit;

/** it will merge horizentally and it takes all the values from right side table and matching records from the left table **/

proc sql;
create table right_join as
select * from one a right join two b
on  a.id=b.ids;
quit;

/** cross join **/
/** it takes all the records from the first table and multiplied with all the records from the seconds table **/
proc sql;
create table cross_join as
select * from one a cross join two b;
quit;

proc sql;
create table cross_join as
select * from one a , two b;
quit;

/** common variables in the tables **/

data one;
input id @@;
cards;
1 2 4 8 9 9 2 3 7
;
run;

data two;
input id @@;
cards;
2 1 8 . . 3 5 4 6 9
;
run;

data three;
input id @@;
cards;
8 7 1 3 7 7 4 1 2
;
run;

/** it will merge horizentally and takes all the values from the both the tables **/
/** if we have common variables from the both the tables and it will performaing like a left join **/

proc sql;
create table full_join as
select * from one a full join two b
on  a.id=b.id;
quit;

/** it will merge horizentally and takes common the values from the both the tables **/
proc sql;
create table inner_join as
select * from one a inner join two b
on  a.id=b.id;
quit;


/** it will merge horizentally and it takes all the values from left side table and matching records from the right table **/
/** if we have common variables in the both tables it will take only the left side table like except operator **/
proc sql;
create table left_join as
select * from one a left join two b
on  a.id=b.id;
quit;

/** it will merge horizentally and it takes all the values from right side table and matching records from the left table **/

proc sql;
create table right_join as
select * from one a right join two b
on  a.id=b.id;
quit;


proc sql;
create table cross_join as
select * from one a cross join two b;
quit;

proc sql;
create table cross_join as
select * from one a , two b , three c;
quit;
/** joins in datastep **/
data one;
input id @@;
cards;
1 2 4 8 9 9 2 3 7 . 0
;
run;

data two;
input id @@;
cards;
2 1 8 3 5 4 6 9
;
run;


proc sort data=one out=one_sort;
by id;
run;

proc sort data=two out=two_sort;
by id;
run;


/** full join in data step **/
data full_join;
merge one_sort(in=a) two_sort(in=b);
by id;
if a or b;
run;

proc sql;
create table sql_full_join as
select * from one a full join two b on a.id=b.id;
quit;

data inner_join;
merge one_sort(in=a) two_sort(in=b);
by id;
if a and b;
run;

proc sql;
create table sql_inner_join as
select * from one a inner join two b on a.id=b.id;
quit;


data left_join;
merge one_sort(in=a) two_sort(in=b);
by id;
if a ;
run;

proc sql;
create table sql_left_join as
select * from one a left join two b on a.id=b.id;
quit;


data right_join;
merge one_sort(in=a) two_sort(in=b);
by id;
if b;
run;

proc sql;
create table sql_right_join as
select * from one a right join two b on a.id=b.id;
quit;


/** SET OPERATORS **/

/* except */
/* intersect */
/* union */
/* union all */
/* union corresponding */
/* outer union  */
/* outer union corr */

data one;
input id@@;
cards;
1 2 4 8 9 9 2 3 7 . 0
;
run;

data two;
input id;
cards;
2 1 8 3 5 4 6 9
;
run;

/** it will take left side table value are not there in second data set values **/
proc sql;
create table except_operator as
select * from one 
except 
select * from two;
quit;

/** it will take common records from the both the tables and it won't allow duplicates **/ 
proc sql;
create table intersect_operator as
select * from one 
intersect 
select * from two;
quit;

/** it will take common records from the both the tables and it will allow duplicates **/ 
proc sql;
create table inner_join_operator as
select * from one  a
inner join  two b
on a.id =b.id;
quit;

/** it will merge vertically and it won't allow duplicates **/
proc sql;
create table union_operator as
select * from one  
union 
select * from two;
quit;


/** it will merge vertically and it will allow duplicates **/
proc sql;
create table union_all_operator as
select * from one  
union all
select * from two;
quit;



/** it will merge vertically by using correspondent variable(id) it won't allow duplicates **/

proc sql;
create table union_corr_operator as
select * from one  
union corresponding
select * from two;
quit;

/** it will take only left side values and also take right side table it will give value is missing **/
proc sql;
create table outer_union_operator as
select * from one  
outer union 
select * from two;
quit;

/** it will merge vertically by using corresponding variable  **/

proc sql;
create table outer_union_corr_operator as
select * from one  
outer union corr
select * from two
;
quit;

data one;
input id @@;
cards;
1 2 4 8 9 9 2 3 7 . 0
;
run;

proc sql;
delete from one where id in (.,0) ;
quit;

proc sql;
create table count_visit (PATIENT_ID num(5), PATIENT_NAME char(50),VISIT_DATE char(12), DEPT_NAME char(100), age num(5));
insert into count_visit values (204,'KIM BOWERS','7/13/2017','CARDIOTHORACIC SURGERY', 16);
insert into count_visit values (204,'KIM BOWERS', '9/24/2017','GENERAL SURGERY', 16);
insert into count_visit values (204,'KIM BOWERS','3/13/2017','ORTHOPAEDICS', 16);
insert into count_visit values (204,'KIM BOWERS', '4/3/2017','ORTHOPAEDICS', 16);
insert into count_visit values (204,'KIM BOWERS','1/18/2017','PEDIATRICS', 16);
insert into count_visit values (204,'KIM BOWERS','7/7/2017','PEDIATRICS', 16);
insert into count_visit values (204,'KIM BOWERS','9/19/2017','PEDIATRICS', 16);
insert into count_visit values (204,'KIM BOWERS','4/30/2017','PLASTIC SURGERY', 16);
insert into count_visit values (206,'CARL MAGNUS','5/25/2017','INTERNAL MEDICINE', 15);
insert into count_visit values (206,'CARL MAGNUS','7/11/2017','ORTHOPAEDICS', 15);
insert into count_visit values (208,'PATRICK FULLER','8/28/2017','ORTHOPAEDICS', 12);
insert into count_visit values (213,'TODD SWEENEY','8/18/2017',	'ORTHOPAEDICS',	12);
insert into count_visit values (213,'TODD SWEENEY',	'10/15/2017','PLASTIC SURGERY',	12);
insert into count_visit values (214,'JACOB MUELLER','3/12/2017','PEDIATRICS',13);
insert into count_visit values (214,'JACOB MUELLER','9/7/2017','PEDIATRICS', 17);
insert into count_visit values (216,'TRUMAN CAMPBELL','6/16/2017','OTOLOARYNGOLOGY', 14);
insert into count_visit values (216,'TRUMAN CAMPBELL','4/6/2017','PEDIATRICS', 18);
insert into count_visit values (220,'KELSEY RICHARDS','6/6/2017','PEDIATRICS', 12);
insert into count_visit values (220,'KELSEY RICHARDS','8/5/2017','PEDIATRICS', 18);
insert into count_visit values (223,'CHARLOTTE GRAHAM', '3/13/2017','OTOLOARYNGOLOGY', 12);
insert into count_visit values (223,'CHARLOTTE GRAHAM','11/16/2017','PEDIATRICS', 12);
insert into count_visit values (223,'CHARLOTTE GRAHAM','5/31/2017','PEDIATRICS', 12);
insert into count_visit values (223,'CHARLOTTE GRAHAM','9/29/2017','PEDIATRICS', 12);
insert into count_visit values (224,'PAUL MUELLER','6/21/2017','OTOLOARYNGOLOGY', 18);
insert into count_visit values (224,'PAUL MUELLER','10/11/2017','PEDIATRICS',	17);
insert into count_visit values (224,'PAUL MUELLER','3/23/2017','PEDIATRICS', 17);
insert into count_visit values (226,'WILLIAM HARRIS','8/15/2017','ORTHOPAEDICS', 11);
insert into count_visit values (226,'WILLIAM HARRIS','8/30/2017','ORTHOPAEDICS', 11);
insert into count_visit values (226,'WILLIAM HARRIS','2/22/2017','PEDIATRICS', 11);
quit;


proc sql ; 
create table ds as
select distinct(PATIENT_ID),PATIENT_NAME,DEPT_NAME,count(DEPT_NAME) as count_dept_name 
from count_visit group by DEPT_NAME, PATIENT_NAME;
quit;


data new;
input id name $ qtr1-qtr4 ;
cards;
101 a 10 11 12 13 
102 b 11 12 13 14 
103 c 16 18 18 19 
;
run;

proc sql;
create table ds as
select id, min(qtr1,qtr2,qtr3,qtr4) as minqtr format=dollar3. from new;
quit;

PROC SQL;
SELECT *,
sum(age) as sum_age,
avg(height) as avg_height,
avg(weight) as avg_weight 
FROM sashelp.class  
group BY sex 
having age in (15,16);
QUIT;

PROC SQL;
SELECT *,
sum(age) as sum_age,
avg(height) as avg_height, 
avg(weight) as avg_weight 
FROM sashelp.class  
where age in (15,16)
order BY sex ;
QUIT;
